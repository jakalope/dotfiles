#!/bin/bash

VIMEXEC='vim'

if [[ ${VIMSERVER} == "" ]]; then
    VIMSERVER="VIM"
fi

function open_in_tab() {
    while [[ $# > 0 ]]; do
        "$VIMEXEC" --servername $VIMSERVER --remote-silent "${1}"
        shift
        sleep 0.1
    done
}

function set_cwd_file() {
    echo "${1}" > "${CWD_FILE}"
}

function open_file_to_line() {
    # tell the vim server to open the file
    local raw="${1%:*}"
    local line="${1#*:}"
    local vim_cwd_file="$(readlink -f "${cwd}/$raw")"
    local cmd_cwd_file="$(readlink -f "$(pwd)/$raw")"
    if [[ -e "$raw" ]]; then
        echo RAW >> ${HOME}/vims_usage
        open_in_tab "${raw}"
        # wait for vim to open the file
        sleep 0.1
        # move the to appropriate line
        "$VIMEXEC" --servername $VIMSERVER --remote-send "$line"
    elif [[ -e "$vim_cwd_file" ]]; then
        echo VIM_CWD >> ${HOME}/vims_usage
        open_in_tab "${vim_cwd_file}"
        # wait for vim to open the file
        sleep 0.1
        # move the cursor to appropriate line
        "$VIMEXEC" --servername $VIMSERVER --remote-send "$line"
    elif [[ -e "$cmd_cwd_file" ]]; then
        echo CMD_CWD >> ${HOME}/vims_usage
        open_in_tab "${cmd_cwd_file}"
        # wait for vim to open the file
        sleep 0.1
        # move the cursor to appropriate line
        "$VIMEXEC" --servername $VIMSERVER --remote-send "$line"
    else
        echo "Couldn't find any of the following:"
        echo "  $raw"
        echo "  $vim_cwd_file"
        echo "  $cmd_cwd_file"
        echo
        echo "NOTE: "
        echo "  pwd => $(pwd)"
        echo "  cwd => ${cwd}"
        return 1
    fi
    return 0
}

# See if a CWD file exists for this vimserver.
# If a vimserver has already been started, make sure we're in its CWD.
CWD_FILE="${HOME}/${VIMSERVER}"
if [[ -e "${CWD_FILE}" && $# != 0 ]]; then
    # Otherwise, cleanup any old files related to this check and write a new one.
    cwd=$(cat "${CWD_FILE}")
    "$VIMEXEC" --servername $VIMSERVER --remote-send "cd ${cwd}"
elif [[ $# == 0 ]]; then
    # If we're starting a new vimserver, make a new CWD file.
    cwd="$(pwd)"
    set_cwd_file "$cwd"
else
    # If by some error, there is no CWD file but the vimserver is already running,
    # find out what the CWD /should/ be and make a new file.
    cwd="$("$VIMEXEC" --servername $VIMSERVER --remote-expr 'getcwd()')"
    set_cwd_file "$cwd"
fi

# Check if we're being piped some input
if [[ ! -t 0 && $# == 0 ]]; then
    # If so, expect it in "<filename>[:linenumber[:garbage]]" format,
    # separated by newlines and open each file in a separate tab by calling
    # this script recursively
    awk '{print $1}' | awk -F: '{print "vims " $1 ":" $2}' | bash
# Check if we have some arguments
elif [[ $# > 0 ]]; then
    # get the current working directory of the vim server
    if [[ ${1} == '-v' ]]; then
        # remove the -v
        shift
        # tell the vim server to open the file in a new tab
        "$VIMEXEC" --servername $VIMSERVER --remote-tab "$1"
        # wait for vim to open the file
        sleep 0.1
        # open a new v-split
        "$VIMEXEC" --servername $VIMSERVER --remote-send ':vsp<CR>'
        # wait for the new v-split to open
        sleep 0.1
        # remove the first file from the argument list
        shift
        # open the second file in the new vsplit
        "$VIMEXEC" --servername $VIMSERVER --remote "$1"
    elif [[ ${1} == '-t' ]]; then
        open_file_to_line "$(xsel --clipboard --output)"
    else
        open_file_to_line "${@}"
    fi
# Nothing from stdin, no arguemnts, so start a server
else
    #TODO Check if a server is already running under this name
    pwd > ~/${VIMSERVER}
    "$VIMEXEC" --servername $VIMSERVER
fi

