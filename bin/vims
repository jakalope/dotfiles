#!/bin/bash

function set_cwd_file() {
    echo "${1}" > "${CWD_FILE}"
}

function paste() {
    if [[ "$(uname -s)" == "Darwin" ]]; then
        pbpaste
    else
        xsel --clipboard --output
    fi
}

function open_file_to_line() {
    # Tell the vim server to open the file
    local raw="${1//:*}" # remove trailing characters after the filename
    local line="${1#*:}" # keep only the suffix after the filename
    local line="${line%%:*}"  # keep only the prefix of the suffix; the line#

    # Correct the case where no colon is given.
    if [[ "$raw" == "$line" ]]; then
        line=""
    elif [[ "$line" != "" ]]; then
        line="+$line"
    fi

    local vim_cwd_file="$(readlink "${MY_WORKSPACE_DIR}/$raw")"
    local cmd_cwd_file="$(readlink "$(pwd)/$raw")"

    # Move the window focus to the left.
    $VIMEXEC --remote-send '<C-\><C-n>:wincmd h<CR>'

    if [[ -e "$raw" ]]; then
        echo RAW >> ${HOME}/vims_usage
        $VIMEXEC --remote-silent ${line} ${raw}
        echo "$VIMEXEC --remote-silent ${line} ${raw}"
    elif [[ -e "$vim_cwd_file" ]]; then
        echo VIM_CWD >> ${HOME}/vims_usage
        $VIMEXEC --remote-silent ${line} ${vim_cwd_file}
    elif [[ -e "$cmd_cwd_file" ]]; then
        echo CMD_CWD >> ${HOME}/vims_usage
        $VIMEXEC --remote-silent ${line} ${cmd_cwd_file}
    else
        echo "Couldn't find any of the following:"
        echo "  $raw"
        echo "  ${vim_cwd_file}"
        echo "  ${cmd_cwd_file}"
        echo
        echo "NOTE: "
        echo "  pwd => $(pwd)"
        echo "  cwd => ${MY_WORKSPACE_DIR}"
        echo
        if [[ "$line" == "" ]]; then
            echo "No line specified. Creating new file..."
            $VIMEXEC --remote-silent ${raw}
        else
            return 1
        fi
    fi
    return 0
}

SLEEP_TIME='0.5'

if >/dev/null printenv NVIM_LISTEN_ADDRESS; then
    # Get the name of our Neovim server using NeoVimRemote.
    VIMEXEC="nvr"
else
    # As of vim 8.0.0829, this env will be set on `:terminal`s.
    if [[ $VIM_SERVERNAME == "" ]]; then
        VIM_SERVERNAME="VIM"
    fi
    VIMEXEC="vim --servername $VIM_SERVERNAME"
fi

# Check if we're being piped some input
if [[ ! -t 0 && $# == 0 ]]; then
    # If so, expect it in "<filename>[:linenumber[:garbage]]" format,
    # separated by newlines and open each file in a separate tab by calling
    # this script recursively
    awk '{print $1}' | awk -F: '{print "vims " $1 ":" $2}' | bash
elif [[ $# > 0 ]]; then
    # If we have some arguments, treat them as a single file[:line] argument.
    open_file_to_line "${@}"
else
    # Nothing from stdin, no arguemnts, so start a server
    if >/dev/null printenv VIM_SERVERNAME; then
        pwd > ~/${VIM_SERVERNAME}
    fi
    $VIMEXEC
fi


